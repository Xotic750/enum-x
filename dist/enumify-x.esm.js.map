{"version":3,"sources":["../src/enumify-x.js"],"names":[],"mappings":"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","file":"enumify-x.esm.js","sourcesContent":["import isArrayLike from 'lodash/isArrayLike';\nimport isObjectLike from 'lodash/isObjectLike';\nimport isSafeInteger from 'lodash/isSafeInteger';\nimport isVarName from 'is-var-name';\nimport isSymbol from 'is-symbol';\nimport Set from 'core-js-pure/features/set';\nimport Map from 'core-js-pure/features/map';\n\nconst reserved = new Set(['forEach', 'name', 'toJSON', 'toString', 'value', 'valueOf']);\n\n/**\n * An enumeration is a set of symbolic names (members) bound to unique, constant\n * values. Within an enumeration, the members can be compared by identity, and\n * the enumeration itself can be iterated over.\n * Influenced by Python's Enum implementation.\n *\n * Create an enum name/value. Not usually called directly.\n *\n * @see @link https://docs.python.org/3/library/enum.html\n * @param {string} name - The name of the enum.\n * @param {*} value - The value of the enum.\n * @returns {object} The enum.\n */\nexport default function Enum(name, value) {\n  if (arguments.length > 0) {\n    const strName = isSymbol(name) === false && String(name);\n\n    if (reserved.has(strName)) {\n      throw new SyntaxError(`Name is reserved: ${strName}`);\n    }\n\n    Object.defineProperties(this, {\n      name: {\n        enumerable: true,\n        value: strName,\n      },\n      value: {\n        enumerable: true,\n        value,\n      },\n    });\n\n    Object.freeze(this);\n  }\n}\n\nObject.defineProperties(Enum.prototype, {\n  toJSON: {\n    value: function toJSON() {\n      return {\n        name: this.name,\n        value: this.value,\n      };\n    },\n  },\n  toString: {\n    value: function toString() {\n      return `${this.constructor.name}.${this.name}`;\n    },\n  },\n});\n\nconst generateNextValue = function _generateNextValue() {\n  let count = 0;\n\n  return {\n    next(name, value) {\n      if (isSafeInteger(value)) {\n        count = value;\n      }\n\n      const result = count;\n\n      count += 1;\n\n      return result;\n    },\n  };\n};\n\nconst initialise = function _initialise(CstmCtr, properties, opts) {\n  const keys = new Set();\n  const dNames = new Map();\n  const dValues = new Map();\n  let isClone;\n  let items;\n\n  if (isArrayLike(properties)) {\n    items = properties;\n  } else if (typeof properties === 'function' && properties.prototype instanceof Enum) {\n    isClone = true;\n    items = properties.toJSON();\n  } else {\n    throw new Error('bad args');\n  }\n\n  const iter = typeof opts.auto === 'function' ? opts.auto() : generateNextValue();\n  let next;\n\n  const itemsIteratee = function _itemsIteratee(item) {\n    let ident;\n\n    if (isClone || isObjectLike(item)) {\n      next = iter.next(item.name, item.value);\n      ident = new CstmCtr(item.name, item.value);\n    } else {\n      next = iter.next(item);\n      ident = new CstmCtr(item, next);\n    }\n\n    const {name} = ident;\n\n    if (dNames.has(name)) {\n      throw new TypeError(`Attempted to reuse name: ${name}`);\n    }\n\n    dNames.set(name, ident);\n    const {value} = ident;\n\n    if (dValues.has(value)) {\n      const oName = dValues.get(value);\n\n      if (opts.unique) {\n        const here = `${name} -> ${oName}`;\n\n        throw new TypeError(`Duplicate value (${value}) found: ${here}`);\n      }\n\n      ident = dNames.get(oName);\n    } else {\n      dValues.set(value, name);\n      keys.add(name);\n    }\n\n    Object.defineProperty(CstmCtr, name, {\n      enumerable: true,\n      value: ident,\n    });\n  };\n\n  items.forEach(itemsIteratee);\n\n  return {\n    keys,\n    names: dNames,\n    values: dValues,\n  };\n};\n\nconst calcString = function _calcString(ctrName, names) {\n  const strArr = [];\n  names.forEach((enumMember) => {\n    strArr.push(JSON.stringify(enumMember.name));\n  });\n\n  return `${ctrName} { ${strArr.join(', ')} }`;\n};\n\nObject.defineProperties(Enum, {\n  /**\n   * Creates an enumeration collection. Primary method.\n   *\n   * @param {string} typeName - The name of the enum collection.\n   * @param {Array} properties - Initialiser array.\n   * @param {object} options - Options to determine behaviour.\n   * @returns {Function} The enumeration collection.\n   * @example\n   * import Enum from 'enumify-x';\n   *\n   * // Creating an Enum\n   * // Example allows duplicate values, known as aliases.\n   * // Member values can be anything: number, string, etc.. If the exact value is\n   * // unimportant you may use auto instances and an appropriate value will be\n   * // chosen for you. Care must be taken if you mix auto with other values.\n   * //\n   * // The class color is an enumeration (or enum)\n   * // The attributes color.RED, color.GREEN, etc., are enumeration members\n   * // (or enum members) and are functionally constants.\n   * // The enum members have names and values (the name of color.RED is RED,\n   * // value of color.BLUE is 10, etc.)\n   * const color = Enum.create('color', [\n   *   'RED', // auto assign value, starting 0\n   *   'YELLOW', // auto assign value, will be 1\n   *   {name: 'BLUE', value: 10},\n   *   'PINK', // auto assign value, will be 11\n   *   {name: 'BLACK', value: 1}, // This is an alias for YELLOW\n   * ]);\n   *\n   * console.log(color.YELLOW); // { name: 'YELLOW', value: 1 }\n   * console.log(color.BLUE.name); // 'BLUE'\n   * console.log(color.BLUE.value); // 10\n   * console.log(color.BLACK === color.YELLOW); // true\n   * // Enumeration members have human readable string representations.\n   * color.PINK.toString(); // 'color.PINK'\n   * // Enums also have a human readable string representations.\n   * color.toString(); // 'color { \"RED\", \"YELLOW\", \"BLUE\", \"PINK\", \"BLACK\" }'\n   * // The type of an enumeration member is the enumeration it belongs to.\n   * console.log(color.PINK instanceof color); // true\n   * // You can access by value too.\n   * console.log(color(10)); // color.BLUE\n   *\n   * // Enumeration members are hashable, so they can be used as property names.\n   * const apples = {};\n   * apples[color.RED] = 'Red Delicious';\n   * apples[color.YELLOW] = 'Golden Delicious';\n   * console.log(apples); // {color.RED: 'Red Delicious', color.YELLOW: 'Golden Delicious'}\n   *\n   * // No aliases are allowed in this example.\n   * const opts = {\n   *   unique: true,\n   * };\n   *\n   * // Having two enum members with the same name is invalid\n   * Enum.create('fail', ['RED', 'RED'], opts);\n   *\n   * // However, two enum members are allowed to have the same value. Given two\n   * // members A and B with the same value (and A defined first), B is an alias\n   * // to A. By-value lookup of the value of A and B will return A. By-name\n   * // lookup of B will also return A. as seen in the definition of color.\n   *\n   * const color1 = Enum.create('color1', ['RED', 'YELLOW'], opts);\n   *\n   * // Depending on the value types used, enumerations are serialisable.\n   * JSON.stringify(color1); // '[{\"name\":\"RED\",\"value\":0},{\"name\":\"YELLOW\",\"value\":1}]'\n   *\n   * // Enumerations support iteration, in definition order.\n   * // The forEach() method executes a provided function once per each\n   * // name/value pair in the Enum object, in insertion order.\n   * // Iterating over the members of an enum does not provide the aliases.\n   * color1.forEach((enumMember) => {\n   *   console.log(enumMember.name, enumMember.value);\n   * });\n   *\n   * // Where supported, for..of can be used.\n   * // Iterating over the members of an enum does not provide the aliases.\n   * for (const {name, value} of color1) {\n   *   console.log(name, value);\n   * }\n   *\n   * // Otherwise, standard iterator pattern.\n   * // Iterating over the members of an enum does not provide the aliases.\n   * const iter = color1[Symbol.iterator]();\n   * let next = iter.next();\n   * while (next.done === false) {\n   *   const enumMember = next.value;\n   *   console.log(enumMember.name, enumMember.value);\n   *   next = iter.next();\n   * }\n   *\n   * // To iterate all items, including aliases.\n   * const allenumMembers = color1.toJSON();\n   * allenumMembers.forEach((enumMember) => {\n   *   console.log(enumMember.name, enumMember.value);\n   * });\n   *\n   * // Lookups can be performed on the value and not just the name.\n   * console.log(color1(0) === color1.RED); // true\n   * console.log(color1(1) === color1.YELLOW); // true\n   *\n   * // Values can be anything, but names must be a string.\n   * const anotherEnum = Enum.create('anotherEnum', [\n   *   {name: 'OBJECT', value: {}},\n   *   {name: 'ARRAY', value: []},\n   *   {\n   *     name: 'FUNCTION',\n   *     value() {\n   *       return undefined;\n   *     },\n   *   },\n   * ]);\n   *\n   * // Enums can be cloned\n   * const cloneEnum = Enum.create('cloneEnum', anotherEnum);\n   * console.log(cloneEnum === anotherEnum); // false\n   * console.log(cloneEnum.OBJECT === anotherEnum.OBJECT); // false\n   * console.log(cloneEnum.OBJECT.name === anotherEnum.OBJECT.name); // true\n   * console.log(cloneEnum.OBJECT.value === anotherEnum.OBJECT.value); // true\n   *\n   * // Options\n   * // unique: {boolean} - whether aliases are allowed.\n   * // auto: {Function} - if you wish to define your own auto value allocation.\n   * // classMethods: {Object<Function>} - to defined methods on the enum.\n   * // instanceMethods: {Object<Function>} - to defined methods on the enum members.\n   *\n   * // ------------------------------------------------------\n   *\n   * const opts1 = {\n   *   auto() {\n   *     return {\n   *       next(name, value) {\n   *         return name;\n   *       },\n   *     };\n   *   },\n   * };\n   *\n   * const subject1 = Enum.create('subject1', ['RED'], opts1);\n   * console.log(subject1.RED); // { name: 'RED', value: 'RED'}\n   *\n   * // ------------------------------------------------------\n   *\n   * const opts2 = {\n   *   classMethods: {\n   *     favourite() {\n   *       return this.RED;\n   *     },\n   *   },\n   * };\n   *\n   * const subject2 = Enum.create('subject2', ['RED'], opts2);\n   * console.log(subject2.favourite() === subject2.RED); // true\n   *\n   * // ------------------------------------------------------\n   *\n   * const opts3 = {\n   *   instanceMethods: {\n   *     description() {\n   *       return `Description: ${this.toString()}`;\n   *     },\n   *   },\n   * };\n   *\n   * const subject3 = Enum.create('subject3', ['RED'], opts3);\n   * console.log(subject3.RED.description() === 'Description: subject3.RED'); // true\n   */\n  create: {\n    value: function create(typeName, properties, options) {\n      const ctrName = isSymbol(typeName) === false && String(typeName);\n\n      if (ctrName === 'undefined' || isVarName(ctrName) === false) {\n        throw new Error(`Invalid enum name: ${ctrName}`);\n      }\n\n      const opts = isObjectLike(options) ? options : {};\n      let CstmCtr;\n      let data;\n\n      // noinspection JSUnusedLocalSymbols\n      const construct /* eslint-disable-line no-unused-vars */ = function _construct(context, args) {\n        const argsArr = [...args];\n\n        if (data) {\n          if (isObjectLike(context) && context instanceof CstmCtr) {\n            throw new SyntaxError('Enum classes can’t be instantiated');\n          }\n\n          return data.names.get(data.values.get(argsArr.shift()));\n        }\n\n        Enum.apply(context, argsArr);\n\n        return context;\n      };\n\n      /* eslint-disable-next-line no-eval */\n      CstmCtr = eval(`(0,function ${ctrName}(value){return construct(this,arguments)})`);\n\n      let asString;\n      Object.defineProperties(CstmCtr, {\n        forEach: {\n          value: function forEach(callback, thisArg) {\n            data.keys.forEach((key) => {\n              callback.call(thisArg, data.names.get(key));\n            });\n          },\n        },\n\n        toJSON: {\n          value: function toJSON() {\n            const value = [];\n            data.names.forEach((enumMember) => {\n              value.push(enumMember.toJSON());\n            });\n\n            return value;\n          },\n        },\n\n        toString: {\n          value: function toString() {\n            if (typeof asString === 'undefined') {\n              asString = calcString(ctrName, data.names);\n            }\n\n            return asString;\n          },\n        },\n      });\n\n      /* eslint-disable-next-line compat/compat */\n      if (typeof Symbol === 'function' && isSymbol(Symbol(''))) {\n        /* eslint-disable-next-line compat/compat */\n        Object.defineProperty(CstmCtr, Symbol.iterator, {\n          value: function iterator() {\n            /* eslint-disable-next-line compat/compat */\n            const iter = data.keys[Symbol.iterator]();\n            const $next = function next() {\n              const nxt = iter.next();\n\n              return nxt.done\n                ? nxt\n                : {\n                    done: false,\n                    value: data.names.get(nxt.value),\n                  };\n            };\n\n            return {\n              next: $next,\n            };\n          },\n        });\n      }\n\n      CstmCtr.prototype = Object.create(Enum.prototype);\n      Object.defineProperties(CstmCtr.prototype, {\n        constructor: {value: CstmCtr},\n        name: {value: ctrName},\n      });\n\n      if (isObjectLike(opts.classMethods)) {\n        Object.keys(opts.classMethods).forEach((key) => {\n          if (reserved.has(key)) {\n            throw new SyntaxError(`Name is reserved: ${key}`);\n          }\n\n          const method = opts.classMethods[key];\n\n          if (typeof method === 'function') {\n            Object.defineProperty(CstmCtr, key, {value: method});\n            reserved.add(key);\n          }\n        });\n      }\n\n      if (isObjectLike(opts.instanceMethods)) {\n        Object.keys(opts.instanceMethods).forEach((key) => {\n          if (reserved.has(key)) {\n            throw new SyntaxError(`Name is reserved: ${key}`);\n          }\n\n          const method = opts.instanceMethods[key];\n\n          if (typeof method === 'function') {\n            Object.defineProperty(CstmCtr.prototype, key, {value: method});\n            reserved.add(key);\n          }\n        });\n      }\n\n      data = initialise(CstmCtr, properties, opts);\n\n      return Object.freeze(CstmCtr);\n    },\n  },\n});\n"]}